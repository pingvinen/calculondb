/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace CalculonDb
{

  [Serializable]
  public partial class Result : TBase
  {
    private int _statusCode;
    private int _statusMessage;
    private List<ThriftReport> _reports;

    public int StatusCode
    {
      get
      {
        return _statusCode;
      }
      set
      {
        __isset.statusCode = true;
        this._statusCode = value;
      }
    }

    public int StatusMessage
    {
      get
      {
        return _statusMessage;
      }
      set
      {
        __isset.statusMessage = true;
        this._statusMessage = value;
      }
    }

    public List<ThriftReport> Reports
    {
      get
      {
        return _reports;
      }
      set
      {
        __isset.reports = true;
        this._reports = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool statusCode;
      public bool statusMessage;
      public bool reports;
    }

    public Result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              StatusCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              StatusMessage = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Reports = new List<ThriftReport>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  ThriftReport _elem7 = new ThriftReport();
                  _elem7 = new ThriftReport();
                  _elem7.Read(iprot);
                  Reports.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.statusCode) {
        field.Name = "statusCode";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StatusCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.statusMessage) {
        field.Name = "statusMessage";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StatusMessage);
        oprot.WriteFieldEnd();
      }
      if (Reports != null && __isset.reports) {
        field.Name = "reports";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Reports.Count));
          foreach (ThriftReport _iter8 in Reports)
          {
            _iter8.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Result(");
      sb.Append("StatusCode: ");
      sb.Append(StatusCode);
      sb.Append(",StatusMessage: ");
      sb.Append(StatusMessage);
      sb.Append(",Reports: ");
      sb.Append(Reports);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
